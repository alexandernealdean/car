{"ast":null,"code":"import _slicedToArray from \"C:/Users/Alex/Desktop/car/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\nvar CameraShake = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var _ref$intensity = _ref.intensity,\n      intensity = _ref$intensity === void 0 ? 1 : _ref$intensity,\n      decay = _ref.decay,\n      _ref$decayRate = _ref.decayRate,\n      decayRate = _ref$decayRate === void 0 ? 0.65 : _ref$decayRate,\n      _ref$maxYaw = _ref.maxYaw,\n      maxYaw = _ref$maxYaw === void 0 ? 0.1 : _ref$maxYaw,\n      _ref$maxPitch = _ref.maxPitch,\n      maxPitch = _ref$maxPitch === void 0 ? 0.1 : _ref$maxPitch,\n      _ref$maxRoll = _ref.maxRoll,\n      maxRoll = _ref$maxRoll === void 0 ? 0.1 : _ref$maxRoll,\n      _ref$yawFrequency = _ref.yawFrequency,\n      yawFrequency = _ref$yawFrequency === void 0 ? 1 : _ref$yawFrequency,\n      _ref$pitchFrequency = _ref.pitchFrequency,\n      pitchFrequency = _ref$pitchFrequency === void 0 ? 1 : _ref$pitchFrequency,\n      _ref$rollFrequency = _ref.rollFrequency,\n      rollFrequency = _ref$rollFrequency === void 0 ? 1 : _ref$rollFrequency,\n      additive = _ref.additive;\n  var camera = useThree(function (state) {\n    return state.camera;\n  });\n  var intensityRef = React.useRef(intensity);\n\n  var _React$useState = React.useState(function () {\n    return new SimplexNoise();\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      yawNoise = _React$useState2[0];\n\n  var _React$useState3 = React.useState(function () {\n    return new SimplexNoise();\n  }),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      pitchNoise = _React$useState4[0];\n\n  var _React$useState5 = React.useState(function () {\n    return new SimplexNoise();\n  }),\n      _React$useState6 = _slicedToArray(_React$useState5, 1),\n      rollNoise = _React$useState6[0];\n\n  var constrainIntensity = function constrainIntensity() {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, function () {\n    return {\n      getIntensity: function getIntensity() {\n        return intensityRef.current;\n      },\n      setIntensity: function setIntensity(val) {\n        intensityRef.current = val;\n        constrainIntensity();\n      }\n    };\n  }, []);\n  useFrame(function (_ref2, delta) {\n    var clock = _ref2.clock;\n    var shake = Math.pow(intensityRef.current, 2);\n    var yaw = maxYaw * shake * yawNoise.noise(clock.elapsedTime * yawFrequency, 1);\n    var pitch = maxPitch * shake * pitchNoise.noise(clock.elapsedTime * pitchFrequency, 1);\n    var roll = maxRoll * shake * rollNoise.noise(clock.elapsedTime * rollFrequency, 1);\n\n    if (additive) {\n      camera.rotation.x += pitch;\n      camera.rotation.y += yaw;\n      camera.rotation.z += roll;\n    } else {\n      camera.rotation.set(pitch, yaw, roll);\n    }\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\nexport { CameraShake };","map":{"version":3,"names":["React","useThree","useFrame","SimplexNoise","CameraShake","forwardRef","ref","intensity","decay","decayRate","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","additive","camera","state","intensityRef","useRef","useState","yawNoise","pitchNoise","rollNoise","constrainIntensity","current","useImperativeHandle","getIntensity","setIntensity","val","delta","clock","shake","Math","pow","yaw","noise","elapsedTime","pitch","roll","rotation","x","y","z","set"],"sources":["C:/Users/Alex/Desktop/car/node_modules/@react-three/drei/core/CameraShake.js"],"sourcesContent":["import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\n\nconst CameraShake = /*#__PURE__*/React.forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 1,\n  pitchFrequency = 1,\n  rollFrequency = 1,\n  additive\n}, ref) => {\n  const camera = useThree(state => state.camera);\n  const intensityRef = React.useRef(intensity);\n  const [yawNoise] = React.useState(() => new SimplexNoise());\n  const [pitchNoise] = React.useState(() => new SimplexNoise());\n  const [rollNoise] = React.useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  useFrame(({\n    clock\n  }, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(clock.elapsedTime * rollFrequency, 1);\n\n    if (additive) {\n      camera.rotation.x += pitch;\n      camera.rotation.y += yaw;\n      camera.rotation.z += roll;\n    } else {\n      camera.rotation.set(pitch, yaw, roll);\n    }\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\n\nexport { CameraShake };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}